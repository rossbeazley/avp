Kata Rules:
One activity, it just does NEW
Event bus (ie message orientated programming)
Tell dont ask, in fact you cant ask - except in the ui layer :)
No mocking frameworks
Dependency injection in fragments



Messages:

User wants to load a video at a url

User wants to pause
User wants to play (un pause)
User wants to seek to a position

Media is ready to play (loaded)
Media has started playing
Media has started paused
Media playback position (time) has changed
Media has finished

User leaves the app
User returns to the app
User exits the app
User wants to restart the media

user sends a query for media into the system

Objects:

User ??
Media player
Rule - auto start media on load



next steps: 23/12/13
implement a screen with a button and text box.
text box is prepopulated with the video url but can be overwritten
when the button is pressed the "User wants to load a video at url" event is dispatched
attached to the event is the value from the text box as a payload

The navigation controller will have to be changed,
the default navigation now is to show this new screen
the video player screen should be shown in response to the user load event


Wiring up the domain:

need to be authenticated
user service, can "authenticate" to and get a user back


A programme
programme repository, can search, is it a user search? ie need a user object and search criteria


A programme stream, retrievable from programme repo?





MID REFACTOR:
going to pull presenters, navigation controllers and screen interfaces into CORE project.
need to wrap the dependencies service with a test to check its assembled correctly, consider an intergrated test to replace the current injection tests
need to pull the navigation controllers factory out into its own object




Features to implement:

Select search result

nav controller responding to MEDIA_ITEM_AVAILABLE

Full page view needs to query the currentResult

Images

Remembers Query, in sql DB
Rehydrates query on APP_RESUME
Current Query getter?

Remembers Search Results
Rehydrates search results on APP_RESUME, or we re-dispatch query?



----- redux media repository


MediaRepository < #ReduxSearch

- responds to the execute query message
    asks the ReduxUser for a token
    builds a request using the token and query object
    asks the request for the response
    returns the response

ReduxSearchRequest
- initialise
  creates a new json request and constructs the url string
- execute
    this puts it on the request queue but uses a future to block


ReduxUser
 - responds to token message
    two states
    : valid expired token (not too old)
    : Asks redux for a new token
      asks the UserAccount for the U/P
      builds a request using the user account details
      saves the response token



-----